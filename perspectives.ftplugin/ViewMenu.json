{
	"sources": {
		"collections": "~/Dropbox/WriteUp/Projects/*",
		"docs": "~/Library/Application Support/Notational Velocity/inbox.txt",
		"filetypes": "txt,md,ft",
		"switches": "-maxdepth 1",
		"mtime": "14"
	},
	"menu": {
		"Done by date": {
			"sources": {
				"mtime": [
					"7"
				]
			},
			"title": "## Done (by date)",
			"for": "$items in //@done",
			"let": [
				"$date = fn:daypart($items@done)",
				"$project = $items@project"
			],
			"groupby": "$date",
			"orderby": "$date",
			"return": [
				"### {$date}",
				{
					"for": "$i in $items",
					"orderby": "$project",
					"return": "- {$i@text} {$i@tags}"
				},
				""
			]
		},
		"Grouped by tag III": {
			"title": "## Tags and their values",
			"for": "$tag in fn:tagSet()",
			"let": "$items = //@{$tag}",
			"orderby": "$tag",
			"return": [
				"### fn:sentence_case({$tag})",
				{
					"for": "$i in $items",
					"let": "$val = $i@{$tag}",
					"groupby": "$val",
					"orderby": "$val",
					"return": [
						"{$val}",
						{
							"for": "$j in $i",
							"return": "[{$j@file} line {$j@linenum}]({$j@link})\t- {$j}"
						},
						""
					]
				},
				""
			]
		},
		"Grouped by tag II": {
			"for": "$tag in fn:tagSet()",
			"let": "$items = //@{$tag}",
			"orderby": "$tag",
			"return": [
				"#### fn:sentence_case({$tag}) (fn:count($items))",
				{
					"for": "$i in $items",
					"let": "$val = $i@{$tag}",
					"orderby": "$val",
					"return": "{$val} - {$i}"
				},
				""
			]
		},
		"Grouped by tag": {
			"for": "$tag in fn:tagSet()",
			"let": "$items = //@{$tag}",
			"orderby": "$tag",
			"return": [
				"#### fn:sentence_case({$tag}) (fn:count($items))",
				{
					"for": "$item in //@{$tag}",
					"return": "- {$item} ({$item@$tag})"
				},
				""
			]
		},
		"Simple sort": {
			"title": "### Testing empty sort order",
			"for": "$line in //@type!=empty",
			"let": "$level = $line@priority",
			"orderby": "$level",
			"return": "- fn:sentence_case({$line@text}) {$level}"
		},
		"Grouped by any old tags": {
			"for": "$tag in fn:tagSet()",
			"let": "$lines = //@{$tag}",
			"return": [
				"### fn:sentence_case({$tag}) (fn:count($lines) items)",
				{
					"for": "$i in $lines",
					"let": "$value = $i@{$tag}",
					"groupby": "$value",
					"orderby": "$value",
					"return": [
						"\t{$value}",
						{
							"for": "$j in $i",
							"return": "\t\t- {$j}"
						},
						""
					]
				},
				""
			]
		},
		"Dates with priority subsections": {
			"title": "## Dates by priority",
			"for": "$line in //@type!=empty",
			"let": "$due = fn:daypart($line@due)",
			"groupby": "$due",
			"orderby": "$due",
			"return": [
				"### Due {$due}",
				"",
				{
					"for": "$item in $line",
					"let": "$level = $item@priority",
					"groupby": "$level",
					"orderby": "$level asc",
					"return": [
						"#### Priority ({$level})",
						{
							"for": "$i in $item",
							"let": "$time = fn:timepart($i@due)",
							"orderby": "$i@due",
							"return": "- {$time} {$i}"
						},
						""
					]
				},
				""
			]
		},
		"Grouped by due date and priority": {
			"for": "$line in //@priority and @due",
			"let": "$level = $line@priority, $due = fn:daypart($line@due)",
			"groupby": "$due, $level",
			"orderby": "$due, $level",
			"return": [
				"#### Due {$due} (Priority {$level})",
				{
					"for": "$i in $line",
					"return": "- fn:timepart({$i@due}) {$i}"
				},
				""
			]
		},
		"Due this week (with NVALT links)": {
			"title": "## This WEEK",
			"for": "$item in //@due <= {today + 7d}",
			"let": "$day = fn:daypart($item@due)",
			"groupby": "$day",
			"orderby": "$day",
			"return": [
				"### {$day}",
				{
					"for": "$i in $item",
					"orderby": "$i@due",
					"return": "- fn:timepart({$i@due}) [{$i}](nvalt://fn:encode_for_uri({$i}))"
				},
				""
			]
		},
		"Overdue (with ftdoc:// links)": {
			"title": "## This WEEK",
			"for": "$item in //@due < {now}",
			"let": "$day = fn:daypart($item@due)",
			"groupby": "$day",
			"orderby": "$day",
			"return": [
				"### {$day}",
				{
					"for": "$i in $item",
					"orderby": "$i@due",
					"return": "- fn:timepart({$i@due}) [{$i}]({$i@url})"
				},
				""
			]
		},
		"Ongoing Started": {
			"title": "# Ongoing",
			"for": "$item in //@start < {today} except //@done",
			"let": "$project = $item@parent, $started = fn:daypart($item@start)", 
			"orderby": "$project",
			"groupby": "$project",
			"return": [
				"## {$project}.todo",
				{
					"for": "$i in $item",
					"return": "- {$started} :: {$i} :: [↗️]({$i@url}) {$i@tags}",
				},
				""
			]
		},
		"Started (with ftdoc:// links)": {
			"title": "# Starting in the Next 7 Days",
			"for": "$item in //@start <= {today + 2d} except //@done",
			"let": "$day = fn:daypart($item@start)",
			"groupby": "$day",
			"orderby": "$day",
			"return": [
				"## {$day}",
				{
					"for": "$i in $item",
					"let": "$project = $item@parent",
					"groupby": "$project",
					"return": [
						"### {$project}.todo",
						{
							"for": "$j in $i",
							"return": "- {$j} :: [↗️]({$j@url}) {$j@tags} {$j@note}",
						},
						""
					]
				},
				""
			]

		},

		"Taskpaper Started": {
			"title": "Starting in the Next 7 Days",
			"for": "$item in //@start <= {today + 2d} except //@done",
			"let": "$day = fn:daypart($item@start)",
			"groupby": "$day",
			"orderby": "$day",
			"return": [
				"{$day}:",
				{
					"for": "$i in $item",
					"let": "$project = $item@parent",
					"groupby": "$project",
					"return": [
						"\t{$project}:",
						{
							"for": "$j in $i",
							"return": "\t\t- {$j} {$j@tags} {$j@note}",
						},
						""
					]
				},
				""
			]

		},
		"Next Actions with Link": {
			"title": "\n# Next Actions",
			"for": "$item in //@next",
			"let": "$project = $item@parent", 
			"orderby": "$project",
			"groupby": "$project",
			"return": [
				"## {$project}.todo",
				{
					"for": "$i in $item",
					"return": "- {$i} :: [↗️]({$i@url}) {$i@tags} {$i@note}",
				},
				""
			]
		},
		"Taskpaper Next Actions": {
			"title": "\nNext Actions:",
			"for": "$item in //@next",
			"let": "$project = $item@parent", 
			"orderby": "$project",
			"groupby": "$project",
			"return": [
				"\t{$project}:",
				{
					"for": "$i in $item",
					"return": "\t\t- {$i} {$i@tags} {$i@note}",
				},
				""
			]
		},
		"Due this week": {
			"title": "## This WEEK no links",
			"for": "$item in //@due <= {today + 7d}",
			"let": "$day = fn:daypart($item@due)",
			"groupby": "$day",
			"orderby": "$day",
			"return": [
				"### {$day}",
				{
					"for": "$i in $item",
					"orderby": "$i@due",
					"return": "- fn:timepart({$i@due}) {$i}"
				},
				""
			]
		},
		"Allocated time": {
			"title": "## Time Allocated",
			"for": "$head in /* intersect //@mins/ancestor::*",
			"let": "$lines = /{$head}//@mins",
			"return": [
				"### fn:upper_case({$head}): total fn:sum($lines@mins)m",
				{
					"for": "$i in $lines",
					"return": "- {$i} ({$i@mins}m)"
				},
				""
			]
		},
		"Tagged lines - grouped by tags": {
			"for": "$tag in fn:tagSet()",
			"return": [
				"## fn:sentence_case({$tag})",
				{
					"for": "$node in //@{$tag}",
					"orderby": "$node@{$tag} asc",
					"return": "{$node@$tag} - {$node}"
				},
				""
			]
		},
		"Grouped by any priority levels found": {
			"title": "### Priorities",
			"for": "$line in //@priority",
			"let": "$level = $line@priority",
			"groupby": "$level",
			"orderby": "$level",
			"return": [
				"### Priority {$level} [fn:sum($line@priority)]",
				{
					"for": "$node in $line",
					"return": "- {$node}"
				},
				""
			]
		},
		"All Nodes simplest sort": {
			"for": "$line in //@type!=empty",
			"let": "$text=$line",
			"orderby": "$text desc",
			"return": "- {$text}"
		},
		"Numbers in sorted in sequence": {
			"for": "$num in (10,9,234, 1,2,    5   ,6,7,3,4,8,9)",
			"orderby": "$num asc",
			"return": "- {$num}"
		},
		"Tags in sequence": {
			"for": "$tag in fn:tagSet()",
			"let": "$all = //@{$tag}",
			"return": [
				"#### fn:sentence_case({$tag})  (fn:count($all))",
				{
					"for": "$i in $all",
					"return": "- {$i}"
				},
				""
			]
		},
		"Tags in document": {
			"for": "$tag in fn:tagSet()",
			"orderby": "$tag",
			"return": "- fn:sentence_case({$tag})"
		},
		"Grouped by due date": {
			"for": "$line in //@due",
			"let": "$due = $line@due",
			"groupby": "$due",
			"orderby": "$due",
			"return": [
				"## Due {$due}",
				{
					"for": "$l in $line",
					"return": "- {$l@parent} → {$l}"
				},
				""
			]
		}
	},
	"queue": []
}
